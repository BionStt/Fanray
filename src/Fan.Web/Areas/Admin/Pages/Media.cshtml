@page
@model Fan.Web.Pages.Admin.MediaModel
@{
    ViewData["Title"] = "Media";
}
@section Styles {
    <style>
        /*.gallery {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-gap: 1em;
        }

            .gallery img {
                object-fit: cover;
                width: 200px;
                height: 200px;
            }

        @@media (max-width: 767px) {
            .gallery {
                grid-template-columns: repeat(4, 1fr);
                grid-gap: 0;
            }
            .gallery img {
                width: 168px;
                height: 168px;
                margin: 8px 0 0 8px;
            }
        }*/

        /*https://jsfiddle.net/webtiki/MpXYr/2/*/
        .square {
            float: left;
            position: relative;
            width: 10%;
            padding-bottom: 10%; /* = width for a 1:1 aspect ratio */
            margin: 0.5%;
            background-position: center center;
            background-repeat: no-repeat;
            background-size: contain; /* "cover" crops squares; "contain" no cropping */
        }
        .square:hover{
            cursor: pointer;
        }

        /*dialog*/
        .dialog {
            max-width: 71%;
            background-color: white;
        }

            .dialog img {
                max-width: 100%;
                height: auto;
            }
            .dialog .img-preview {
                background-color: #f3f6f8;
            }

            .dialog .img-sidebar {
                padding: 20px 15px 0 15px;
            }

                .dialog .img-sidebar ul {
                    padding-left: 0;
                    margin-left: 0;
                    list-style: none;
                }
                    .dialog .img-sidebar ul li {
                        padding-bottom:10px;
                    }
                    .dialog .img-sidebar ul li label {
                        font-weight: bold;
                        color: gray;
                        font: larger;
                        text-transform: uppercase;
                        padding-right: 10px;
                    }

            .dialog .img-btnbar {
                border-top: 1px solid #eee;
                text-align: right;
            }
    </style>
}

<blog-media inline-template>
    <div>
        <v-toolbar class="elevation-0">
            <v-btn flat @@click="uploadImages">
                <v-icon color="primary">cloud_upload</v-icon>
                &nbsp;Upload
            </v-btn>

            <v-progress-circular v-if="progressVisible" 
                                 indeterminate
                                 color="primary"></v-progress-circular>
        </v-toolbar>
        <v-divider></v-divider>

        <div class="gallery">
            <div v-for="image in images" 
                 :key="image.id"
                 @@click="selectImage(image)"
                 class="square" 
                 :title="image.title"
                 :style="{ backgroundImage: 'url(' + image.urlSmall + ')' }"></div>

            @*<a v-for="image in images" :key="image.id" @@click.stop="selectImage(image)">
                <img :src="image.urlSmall"
                     :alt="image.alt"
                     :title="image.title">
            </a>*@
        </div>

        <v-dialog v-if="selectedImage"
                  v-model="dialogVisible"
                  @@keydown.esc="dialogVisible = false"
                  content-class="dialog">

            <v-container fill-height style="padding:0; margin:0">
                <v-layout row wrap>
                    <v-flex xs12 md8 class="img-preview">
                        <v-container fill-height >
                            <v-layout justify-center align-center>
                                <img :src="selectedImage.urlLarge" alt="Alternate Text" />
                            </v-layout>
                        </v-container>
                    </v-flex>
                    <v-flex xs12 md4 class="img-sidebar">
                        <v-text-field label="Title" v-model="selectedImage.title"></v-text-field>
                        <v-textarea label="Caption" v-model="selectedImage.caption"></v-textarea>
                        <v-text-field label="Alt text" v-model="selectedImage.alt"></v-text-field>
                        <v-textarea label="Description" v-model="selectedImage.description"></v-textarea>
                        <v-text-field label="URL" readonly v-model="selectedImage.urlOriginal"></v-text-field>
                        <ul>
                            <li>
                                <label>File Name</label><span>{{ selectedImage.fileName }}</span>
                            </li>
                            <li>
                                <label>File Type</label><span>{{ selectedImage.fileType }}</span>
                            </li>
                            <li>
                                <label>Dimensions</label><span><abbr title="Width in pixels">{{ selectedImage.width }}</abbr> ✕ <abbr title="Height in pixels">{{ selectedImage.height }}</abbr></span>
                            </li>
                            <li>
                                <label>Upload Date</label><span>{{ selectedImage.uploadDate }}</span>
                            </li>
                        </ul>
                    </v-flex>
                </v-layout>
            </v-container>
            <div class="img-btnbar">
                <v-btn color="error" @@click="deleteImage">Delete</v-btn>
                <v-btn color="primary" @@click.stop="dialogVisible=false">Close</v-btn>
                <v-btn color="primary">Update</v-btn>
            </div>

        </v-dialog>
    </div>
</blog-media>

@section ComponentScripts {
    <script>
        Vue.component('blog-media', {
            data: () => ({
                dialogVisible: false,
                images: [],
                progressVisible: false,
                selectedImage: null,
            }),
            mounted() {
                this.getImages();
            },
            methods: {
                selectImage(image) {
                    this.dialogVisible = true;
                    this.selectedImage = image;
                    console.log("selecting image: ", image);
                },
                getImages() {
                    let url = `/admin/media?handler=images`;
                    axios.get(url).then(resp => {
                        this.images = resp.data.images;
                    }).catch(err => console.log(err));
                },
                uploadImages() {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');
                    input.setAttribute('multiple', null);
                    input.click();
                    input.onchange = () => {
                        this.progressVisible = true;
                        const formData = new FormData();
                        for (let i = 0; i < input.files.length; i++) {
                            formData.append('images', input.files[i]);
                        }

                        axios.post('/admin/media?handler=image', formData, { headers: { 'XSRF-TOKEN': this.$root.tok } })
                            .then(resp => {
                                this.progressVisible = false;
                                this.images = resp.data.images;
                            })
                            .catch(err => {
                                console.log(err);
                            });
                    };
                },
                deleteImage() {
                    if (confirm('Are you sure you want to delete this image? Deleted image will no longer appear anywhere on your website. This cannot be undone!')) {
                        console.log('deleting image: ', this.selectedImage);
                        let url = ``;
                    }
                },
            },
        });
    </script>
}