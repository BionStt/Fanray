@page "{postId:int?}"
@model Fan.Web.Pages.Admin.ComposeModel
@{
    ViewData["Title"] = "Compose";
    Layout = null;
    var coreSettings = await settingService.GetSettingsAsync<CoreSettings>();
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <title>@ViewData["Title"] - Fanray</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
    <link href="https://unpkg.com/vuetify@1.1.4/dist/vuetify.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.snow.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/themes/@coreSettings.Theme/css/editor.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/admin/css/composer.min.css" asp-append-version="true" />
    <style>
        .gallery img {
            object-fit: cover;
            width: 200px;
            height: 200px;
            margin: 10px 0 0 10px;
        }

        @@media (max-width: 767px) {
            .gallery img {
                width: 168px;
                height: 168px;
                margin: 8px 0 0 8px;
            }
        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()

    <div id="app" v-cloak>
        <v-app id="inspire" style="background-color:white">
            @* Drawer *@
            <v-navigation-drawer fixed
                                 :clipped="$vuetify.breakpoint.mdAndUp"
                                 app
                                 v-model="drawer">
                <div style="padding: 5px">
                    <v-card v-if="published" style="margin-bottom:8px">
                        <v-container fill-height
                                     fluid
                                     pa-0>
                            <v-layout fill-height>
                                <v-flex xs12 align-end flexbox>
                                    <div class="caption" style="color:#666">Status</div>
                                    <div style="text-align:center;font-size:inherit">
                                        <span style="color:teal;padding-right: 5px;font-weight:bold">Published</span><span>on 2018-09-06</span>
                                    </div>
                                </v-flex>
                            </v-layout>
                        </v-container>
                        <v-card-actions>
                            <v-btn small
                                   style="width:100%"
                                   color="grey darken-2"
                                   class="white--text"
                                   @@click="revert">
                                <v-icon left dark>undo</v-icon>
                                Revert to draft
                            </v-btn>
                        </v-card-actions>
                    </v-card>

                    <v-menu ref="menuDate"
                            :close-on-content-click="false"
                            v-model="menuDate"
                            :return-value.sync="date"
                            lazy
                            transition="scale-transition"
                            offset-y
                            full-width
                            @@input="onFieldsChange">
                        <v-text-field label="Date"
                                      slot="activator"
                                      v-model="date"
                                      readonly></v-text-field>
                        <v-date-picker v-model="date"
                                       no-title
                                       scrollable
                                       @@input="$refs.menuDate.save(date)"></v-date-picker>
                    </v-menu>

                    <v-select label="Category"
                              v-model="selectedCatId"
                              :items="cats"
                              item-value="value"
                              dense
                              @@input="onFieldsChange"></v-select>

                    <v-combobox label="Tags"
                                hint="When you type in a new tag use tab to delimit."
                                v-model="selectedTags"
                                :items="tags"
                                dense
                                multiple
                                small-chips
                                deletable-chips
                                @@input="onFieldsChange"
                                ></v-combobox>

                    <v-text-field label="Slug"
                                  v-model="slug"
                                  @@input="onFieldsChange"></v-text-field>

                    <v-textarea label="Excerpt"
                                :value="excerpt"
                                auto-grow
                                @@input="onFieldsChange"></v-textarea>

                    <v-card flat
                            style="margin-bottom:8px">
                        <v-card-actions>
                            <v-btn small
                                   style="width:100%"
                                   color="grey darken-2"
                                   class="white--text">
                                <v-icon left dark>delete_forever</v-icon>
                                Delete post
                            </v-btn>
                        </v-card-actions>
                    </v-card>
                </div>
            </v-navigation-drawer>
            @* Topbar *@
            <v-toolbar color="blue darken-3"
                       dark
                       app
                       :clipped-left="$vuetify.breakpoint.mdAndUp"
                       fixed>
                <v-toolbar-side-icon @@click.stop="drawer = !drawer"></v-toolbar-side-icon>
                <v-btn @@click="pub" :disabled="disablePubButton" color="orange">{{ pubText }}</v-btn>
                <v-btn>Preview</v-btn>
                <v-btn @@click="saveDraft" flat small v-if="showSave" :disabled="disableSave" color="orange">{{ saveText }}</v-btn>
                <v-spacer></v-spacer>
                <v-btn href="/admin">Close</v-btn>
            </v-toolbar>
            @* Editor *@
            <v-content>
                <div id="editor-area">
                    <v-text-field id="post-title"
                                  label="Title"
                                  v-model="title"
                                  placeholder="Title"
                                  solo
                                  height="70px"
                                  multip
                                  @@input="onFieldsChange"
                                  @@change="saveDraft"></v-text-field>
                    <div id="editor"></div>
                </div>
            </v-content>
            <v-dialog v-model="showMediaDialog" lazy max-width="80%">
                <v-card>
                    <v-card-text>
                        <div>
                            <v-toolbar class="elevation-0">
                                <v-btn flat @@click="uploadImages">
                                    <v-icon color="primary">cloud_upload</v-icon>
                                    &nbsp;Upload
                                </v-btn>
                            </v-toolbar>
                            <v-divider></v-divider>
                            <div class="gallery">
                                <a v-for="image in images" :key="image.id" @@click="insertImage(image.url)">
                                    <img :src="image.url" :alt="image.fileName">
                                </a>
                            </div>
                        </div>
                    </v-card-text>
                    <v-card-actions>
                        <v-btn color="primary" flat @@click.stop="showMediaDialog=false">Close</v-btn>
                    </v-card-actions>
                </v-card>
            </v-dialog>
        </v-app>
    </div>
    <environment include="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.4/dist/vuetify.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.min.js"></script>
        <script src="https://unpkg.com/vuetify@1.1.4/dist/vuetify.min.js"></script>
    </environment>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
    <script src="https://unpkg.com/quill@1.3.6/dist/quill.min.js"></script>
    <script src="https://unpkg.com/axios@0.18.0/dist/axios.min.js"></script>
    <script src="~/lib/quill-image-resize-module/image-resize.min.js"></script>
    <script>
        let Delta = Quill.import('delta');

        var app = new Vue({
            el: '#app',
            data: () => ({
                id: 0,
                published: false,
                pubClicked: false,
                pubText: '',
                showSave: false,
                disableSave: false,
                saveText: 'Save',
                closing: true,
                fieldChanged: false,
                drawer: null,
                menuDate: false,
                date: '',
                selectedCatId: 1,
                cats: [],
                selectedTags: [],
                tags: [],
                slug: '',
                excerpt: '',
                title: '',
                quill: null,
                toolbarOptions: [
                    [{ 'header': [false, 1, 2, 3, 4, 5, 6,] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'list': 'check' }],
                    ['blockquote', 'code-block'],
                    ['link', 'image', 'video'],
                    [{ 'align': '' }, { 'align': 'center' }, { 'align': 'right' }, { 'align': 'justify' }],
                    [{ 'indent': '-1' }, { 'indent': '+1' }],
                    [{ 'color': [] }, { 'background': [] }],
                    ['clean'],
                ],
                mediaDialogVisible: false,
                images: [],
                change: null,
            }),
            computed: {
                showMediaDialog: {
                    get: function () {
                        if (this.mediaDialogVisible) {
                            this.getImages();
                        }
                        return this.mediaDialogVisible
                    },
                    set: function (value) {
                        if (!value) {
                            this.mediaDialogVisible = false;
                        }
                    }
                },
                disablePubButton() {
                    return this.title.trim().length <= 0 || this.pubClicked;
                },
                tok: function () {
                    return document.querySelector('input[name="__RequestVerificationToken"][type="hidden"]').value;
                },
                payload: function () {
                    let content = this.quill.root.innerHTML;
                    if (content === '<p><br></p>') content = '';

                    return {
                        id: this.id,
                        postDate: this.date,
                        categoryId: this.selectedCatId,
                        tags: this.selectedTags,
                        slug: this.slug,
                        excerpt: this.excerpt,
                        title: this.title,
                        body: content,
                    }
                },
            },
            mounted() {
                this.initHighlight();
                this.initEditor();
            },
            methods: {
                initEditor() {
                    this.quill = new Quill('#editor', {
                        modules: {
                            syntax: true,
                            toolbar: this.toolbarOptions,
                            imageResize: {},
                        },
                        theme: 'snow'
                    });

                    this.id = window.location.href.substring(window.location.href.lastIndexOf("/") + 1) | 0;
                    axios.get(`/admin/compose?handler=post&postId=${this.id}`).then(resp => {
                        this.date = resp.data.post.postDate;
                        this.selectedCatId = resp.data.post.categoryId;
                        this.selectedTags = resp.data.post.tags;
                        this.slug = resp.data.post.slug;
                        this.excerpt = resp.data.post.excerpt;
                        this.title = resp.data.post.title;
                        this.quill.clipboard.dangerouslyPasteHTML(resp.data.post.body);
                        this.published = resp.data.published;
                        this.cats = resp.data.allCats;
                        this.tags = resp.data.allTags;
                        this.pubText = this.published ? 'Update' : 'Publish';
                        this.change = new Delta();

                        // auto save
                        let typingTimer;
                        let doneTypingInterval = 5000;
                        this.quill.on('text-change', (delta) => {
                            this.change = this.change.compose(delta);
                            clearTimeout(typingTimer);
                            if (this.change.length() > 0 && !this.published) {
                                this.showSave = true;
                                this.disableSave = false;
                                this.saveText = 'Save';

                                typingTimer = setTimeout(this.saveDraft, doneTypingInterval);
                            }
                        });
                        window.onbeforeunload = () => {
                            if ((this.change.length() > 0 || this.fieldChanged) && this.closing) {
                                return 'There are unsaved changes. Are you sure you want to leave?';
                            }
                        }
                    });

                    // media
                    let toolbar = this.quill.getModule('toolbar');
                    toolbar.addHandler('image', () => this.mediaDialogVisible = true);
                },
                initHighlight() {
                    hljs.configure({
                        languages: ['cs', 'css', 'java', 'javascript', 'markdown', 'ruby', 'python', 'scss', 'sql', 'typescript', 'xml']
                    });
                },
                onFieldsChange() {
                    this.fieldChanged = true;
                    if (this.published) return;
                    this.showSave = true;
                    this.disableSave = false;
                    this.saveText = 'Save';
                },
                saveDraft() {
                    this.showSave = true;
                    this.disableSave = true;
                    this.saveText = 'Saving...';

                    axios.post('/admin/compose?handler=save', this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            this.id = resp.data.id;
                            this.slug = resp.data.slug;
                            if (window.location.href.endsWith('/compose'))
                                history.replaceState({}, null, window.location.href + `/${this.id}`);
                        })
                        .catch(err => { console.log(err); });

                    this.change = new Delta();
                    this.saveText = 'Saved';
                },
                revert() {
                    this.published = false;
                    this.pubText = this.published ? 'Update' : 'Publish';
                    this.saveDraft();
                },
                pub() {
                    this.closing = false;
                    this.pubClicked = true;
                    this.pubText = this.published ? 'Updating...' : 'Publishing...';

                    const url = this.published ? '/admin/compose?handler=update' : '/admin/compose?handler=publish';
                    axios.post(url, this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            window.location.replace(resp.data);
                        })
                        .catch(err => { console.log(err); });
                },
                uploadImages() {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');
                    input.setAttribute('multiple', null);
                    input.click();
                    input.onchange = () => {
                        const formData = new FormData();
                        for (let i = 0; i < input.files.length; i++) {
                            formData.append('images', input.files[i]);
                        }

                        axios.post('/admin/media?handler=image', formData, { headers: { 'XSRF-TOKEN': this.$root.tok } })
                            .then(resp => {
                                this.images = resp.data.images;
                            })
                            .catch(err => {
                                console.log(err);
                            });
                    };
                },
                getImages() {
                    let url = `/admin/media?handler=images`;
                    axios.get(url).then(resp => {
                        this.images = resp.data.images;
                    }).catch(err => console.log(err));
                },
                insertImage(url) {
                    const range = this.quill.getSelection();
                    this.quill.insertEmbed(range.index, 'image', url);
                    this.mediaDialogVisible = false;
                },
            },
        });
    </script>
</body>
</html>