@page "{postId:int?}"
@model Fan.Web.Pages.Admin.ComposeModel
@{
    ViewData["Title"] = "Compose";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <title>@ViewData["Title"] - Fanray Admin Console</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
    <link href="https://unpkg.com/vuetify@1.0.18/dist/vuetify.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.snow.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/monokai-sublime.min.css" rel="stylesheet" />
    <environment include="Development">
        <link rel="stylesheet" href="~/css/compose.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/css/compose.min.css" />
    </environment>
</head>
<body>
    @Html.AntiForgeryToken()

    <div id="app" v-cloak>
        <v-app id="inspire" style="background-color:white">
            @* Drawer *@
            <v-navigation-drawer fixed
                                 :clipped="$vuetify.breakpoint.mdAndUp"
                                 app
                                 v-model="drawer"
                                 style="padding: 0 8px">
                <v-list dense>
                    <v-select :items="blogs"
                              v-model="selectedBlog"
                              label="Blog"
                              class="input-group--focused"
                              @@input="onDrawerFieldsChange"
                              item-value="value">
                    </v-select>
                    <v-menu ref="menuDate"
                            lazy
                            :close-on-content-click="false"
                            v-model="menuDate"
                            transition="scale-transition"
                            offset-y
                            full-width
                            :nudge-right="40"
                            min-width="290px"
                            @@input="onDrawerFieldsChange"
                            :return-value.sync="date">
                        <v-text-field slot="activator"
                                      label="Date"
                                      v-model="date"
                                      class="input-group--focused"
                                      readonly></v-text-field>
                        <v-date-picker v-model="date" @@input="$refs.menuDate.save(date)"></v-date-picker>
                    </v-menu>
                    <v-select v-model="selectedTags"
                              label="Tags (delimiter: tab)"
                              chips
                              tags
                              @@input="onDrawerFieldsChange"
                              :items="tags"
                              class="input-group--focused"></v-select>
                    <v-text-field name="input-2"
                                  label="Slug"
                                  v-model="slug"
                                  @@input="onDrawerFieldsChange"
                                  class="input-group--focused"></v-text-field>
                    <v-text-field name="input-7-2"
                                  label="Excerpt"
                                  v-model="excerpt"
                                  @@input="onDrawerFieldsChange"
                                  class="input-group--focused"
                                  multi-line></v-text-field>
                </v-list>
            </v-navigation-drawer>
            @* Topbar *@
            <v-toolbar color="blue darken-3"
                       dark
                       app
                       :clipped-left="$vuetify.breakpoint.mdAndUp"
                       fixed>
                <v-toolbar-side-icon @@click.stop="drawer = !drawer"></v-toolbar-side-icon>
                <v-btn @@click="pub" v-if="isNew" :disabled="disablePubUpd" color="orange">Publish</v-btn>
                <v-btn @@click="pub" v-if="!isNew" :disabled="disablePubUpd" color="orange">Update</v-btn>
                <v-btn>Preview</v-btn>
                <v-btn @@click="saveDraft" flat small v-if="saveEnabled" :disabled="disableSave" v-text="saveText" color="orange"></v-btn>
                <v-spacer></v-spacer>
                <v-btn @@click="revert" v-if="!isNew">Revert to draft</v-btn>
                <v-btn href="/admin">Close</v-btn>
            </v-toolbar>
            @* Editor *@
            <v-content style="margin: 4px 23px">
                <v-text-field label="Title" v-model="title"
                              @@input="onDrawerFieldsChange"
                              @@change="saveDraft"></v-text-field>
                <div id="editor" style="border:0 solid black" v-html="content">
                </div>
            </v-content>
        </v-app>
    </div>
    <environment include="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.js"></script>
        <script src="https://unpkg.com/vuetify@1.0.18/dist/vuetify.js"></script>
        @* hightlightjs must be included before quill *@
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
        <script src="https://unpkg.com/quill@1.3.6/dist/quill.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.min.js"></script>
        <script src="https://unpkg.com/vuetify@1.0.18/dist/vuetify.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
        <script src="https://unpkg.com/quill@1.3.6/dist/quill.min.js"></script>
    </environment>
    <script src="https://unpkg.com/axios@0.18.0/dist/axios.min.js"></script>
    <script src="~/lib/quill-image-resize-module/image-resize.min.js"></script>
    <script>
        var app = new Vue({
            el: '#app',
            data: () => ({
                id: @Model.Post.Id,
                isNew: @Model.IsNew.ToString().ToLower(),
                saveEnabled: false,
                disableSave: false,
                saveText: 'Save',
                drawer: null,
                selectedBlog: 1,
                blogs: @Html.Raw(Model.Post.AllBlogsJson),
                date: '@Model.Post.PostDate',
                menuDate: false,
                selectedTags: @Html.Raw(Model.Post.TagsJson),
                tags: @Html.Raw(Model.Post.AllTagsJson),
                slug: '@Model.Post.Slug',
                excerpt: '@Model.Post.Excerpt',
                title: '@Model.Post.Title',
                content: '@Html.Raw(Model.Post.Body)',
                quill: {},
                toolbarOptions: [
                    [{ 'header': [false, 1, 2, 3, 4, 5, 6,] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'list': 'check' }],
                    ['blockquote', 'code-block'],
                    ['link', 'image', 'video'],
                    [{ 'align': '' }, { 'align': 'center' }, { 'align': 'right' }, { 'align': 'justify' }],
                    [{ 'indent': '-1' }, { 'indent': '+1' }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'script': 'sub' }, { 'script': 'super' }],
                    ['clean'],
                ],
            }),
            computed: {
                disablePubUpd: function () {
                    return this.title.trim().length <= 0;
                },
                tok: function () {
                    return document.querySelector('input[name="__RequestVerificationToken"][type="hidden"]').value;
                },
                payload: function () {
                    return {
                        id: this.id,
                        title: this.title,
                        blogId: this.selectedBlog,
                        postDate: this.date,
                        tags: this.selectedTags,
                        slug: this.slug,
                        excerpt: this.excerpt,
                    }
                },
            },
            mounted() {
                hljs.configure({
                    languages: ['cs', 'css', 'java', 'javascript', 'markdown', 'ruby', 'python', 'scss', 'sql', 'typescript', 'xml']
                });

                quill = new Quill('#editor', {
                    modules: {
                        syntax: true,
                        toolbar: this.toolbarOptions,
                        imageResize: {},
                    },
                    theme: 'snow'
                });

                // img upload
                let toolbar = quill.getModule('toolbar');
                toolbar.addHandler('image', function () {
                    const input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');
                    input.setAttribute('multiple', null);
                    input.click();
                    input.onchange = () => {
                        app.uploadImages(input.files);
                    };
                });

                // auto save
                var Delta = Quill.import('delta');
                var change = new Delta(); // store accumulated changes
                quill.on('text-change', function (delta) {
                    change = change.compose(delta);
                });
                setInterval(function () { // save periodically
                    if (change.length() > 0) {
                        app.saveDraft();
                        change = new Delta();
                    }
                }, 5 * 1000);
                window.onbeforeunload = function () { // check for unsaved
                    if (change.length() > 0) {
                        return 'There are unsaved changes. Are you sure you want to leave?';
                    }
                }
            },
            methods: {
                onDrawerFieldsChange() {
                    if (!this.isNew) return;
                    if (!this.saveEnabled) this.saveEnabled = true;
                    this.disableSave = false;
                    this.saveText = 'Save';
                },
                saveDraft() {
                    if (!this.saveEnabled) this.saveEnabled = true;
                    this.disableSave = true;
                    this.saveText = 'Saving...';

                    let payload = Object.assign({ body: quill.root.innerHTML }, this.payload);
                    console.log(payload);
                    axios.post('/admin/compose?handler=save', payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(function (response) {
                            app.id = response.data.id;
                            app.slug = response.data.slug;
                        })
                        .catch(function (error) {
                            console.log(error);
                        });

                    this.saveText = 'Saved';
                },
                revert() {
                    this.isNew = true;
                    this.saveDraft();
                },
                uploadImages(files) {
                    const formData = new FormData();
                    for (let i = 0; i < files.length; i++) {
                        formData.append('images', files[i]);
                    }

                    axios.post('/admin/compose?handler=image', formData, { headers: { 'XSRF-TOKEN': this.tok } })
                         .then(function (response) {
                            var urls = response.data;
                            const range = quill.getSelection();
                            for (var i = 0; i < urls.length; i++) {
                                quill.insertEmbed(range.index, 'image', urls[i]);
                            }
                         })
                         .catch(function (error) {
                            console.log(error);
                         });
                },
                pub() {
                    const url = this.isNew ? '/admin/compose?handler=publish' : '/admin/compose?handler=update';
                    let payload = Object.assign({ body: quill.root.innerHTML }, this.payload);
                    axios.post(url, payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(function (response) {
                            console.log(response.data);
                            window.location.replace(response.data);
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                },
            },
        });
    </script>
</body>
</html>