@page "{postId:int?}"
@model Fan.Web.Pages.Admin.ComposeModel
@{
    ViewData["Title"] = "Compose";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
    <title>@ViewData["Title"] - Fanray</title>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons" rel="stylesheet">
    <link href="https://unpkg.com/vuetify@1.0.18/dist/vuetify.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.snow.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/monokai-sublime.min.css" rel="stylesheet" />
    <environment include="Development">
        <link rel="stylesheet" href="~/css/compose.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="~/css/compose.min.css" />
    </environment>
</head>
<body>
    @Html.AntiForgeryToken()

    <div id="app" v-cloak>
        <v-app id="inspire" style="background-color:white">
            @* Drawer *@
            <v-navigation-drawer fixed
                                 :clipped="$vuetify.breakpoint.mdAndUp"
                                 app
                                 v-model="drawer"
                                 style="padding: 0 8px">
                <v-list dense>
                    <v-menu ref="menuDate"
                            lazy
                            :close-on-content-click="false"
                            v-model="menuDate"
                            transition="scale-transition"
                            offset-y
                            full-width
                            :nudge-right="40"
                            min-width="290px"
                            @@input="onFieldsChange"
                            :return-value.sync="date">
                        <v-text-field slot="activator"
                                      label="Date"
                                      v-model="date"
                                      class="input-group--focused"
                                      readonly></v-text-field>
                        <v-date-picker v-model="date" @@input="$refs.menuDate.save(date)"></v-date-picker>
                    </v-menu>
                    <v-select :items="cats"
                              v-model="selectedCatId"
                              label="Categories"
                              class="input-group--focused"
                              @@input="onFieldsChange"
                              item-value="value">
                    </v-select>
                    <v-select v-model="selectedTags"
                              label="Tags (delimiter: tab)"
                              chips
                              tags
                              @@input="onFieldsChange"
                              :items="tags"
                              class="input-group--focused"></v-select>
                    <v-text-field name="input-2"
                                  label="Slug"
                                  v-model="slug"
                                  @@input="onFieldsChange"
                                  class="input-group--focused"></v-text-field>
                    <v-text-field name="input-7-2"
                                  label="Excerpt"
                                  v-model="excerpt"
                                  @@input="onFieldsChange"
                                  class="input-group--focused"
                                  multi-line></v-text-field>
                </v-list>
            </v-navigation-drawer>
            @* Topbar *@
            <v-toolbar color="blue darken-3"
                       dark
                       app
                       :clipped-left="$vuetify.breakpoint.mdAndUp"
                       fixed>
                <v-toolbar-side-icon @@click.stop="drawer = !drawer"></v-toolbar-side-icon>
                <v-btn @@click="pub" :disabled="disablePubButton" color="orange">{{ pubText }}</v-btn>
                <v-btn>Preview</v-btn>
                <v-btn @@click="saveDraft" flat small v-if="showSave" :disabled="disableSave" v-text="saveText" color="orange"></v-btn>
                <v-spacer></v-spacer>
                <v-btn @@click="revert" v-if="published">Revert to draft</v-btn>
                <v-btn href="/admin">Close</v-btn>
            </v-toolbar>
            @* Editor *@
            <v-content style="margin: 4px 23px">
                <v-text-field label="Title" v-model="title"
                              @@input="onFieldsChange"
                              @@change="saveDraft"></v-text-field>
                <div id="editor" style="border:0 solid black"></div>
            </v-content>
        </v-app>
    </div>
    <environment include="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.js"></script>
        <script src="https://unpkg.com/vuetify@1.0.18/dist/vuetify.js"></script>
        @* hightlightjs must be included before quill *@
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
        <script src="https://unpkg.com/quill@1.3.6/dist/quill.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://unpkg.com/vue@2.5.16/dist/vue.min.js"></script>
        <script src="https://unpkg.com/vuetify@1.0.18/dist/vuetify.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
        <script src="https://unpkg.com/quill@1.3.6/dist/quill.min.js"></script>
    </environment>
    <script src="https://unpkg.com/axios@0.18.0/dist/axios.min.js"></script>
    <script src="~/lib/quill-image-resize-module/image-resize.min.js"></script>
    <script>
        var app = new Vue({
            el: '#app',
            data: () => ({
                id: 0,
                published: false,
                pubClicked: false,
                pubText: '',
                showSave: false,
                disableSave: false,
                saveText: 'Save',
                closing: true,
                fieldChanged: false,
                drawer: null,
                menuDate: false,
                date: '',
                selectedCatId: 1,
                cats: [],
                selectedTags: [],
                tags: [],
                slug: '',
                excerpt: '',
                title: '',
                quill: null,
                toolbarOptions: [
                    [{ 'header': [false, 1, 2, 3, 4, 5, 6,] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }, { 'list': 'check' }],
                    ['blockquote', 'code-block'],
                    ['link', 'image', 'video'],
                    [{ 'align': '' }, { 'align': 'center' }, { 'align': 'right' }, { 'align': 'justify' }],
                    [{ 'indent': '-1' }, { 'indent': '+1' }],
                    [{ 'color': [] }, { 'background': [] }],
                    ['clean'],
                ],
            }),
            computed: {
                disablePubButton() {
                    return this.title.trim().length <= 0 || this.pubClicked;
                },
                tok: function () {
                    return document.querySelector('input[name="__RequestVerificationToken"][type="hidden"]').value;
                },
                payload: function () {
                    let content = this.quill.root.innerHTML;
                    if (content === '<p><br></p>') content = '';

                    return {
                        id: this.id,
                        postDate: this.date,
                        categoryId: this.selectedCatId,
                        tags: this.selectedTags,
                        slug: this.slug,
                        excerpt: this.excerpt,
                        title: this.title,
                        body: content,
                    }
                },
            },
            mounted() {
                this.initHighlight();
                this.initEditor();
            },
            methods: {
                initEditor() {
                    this.quill = new Quill('#editor', {
                        modules: {
                            syntax: true,
                            toolbar: this.toolbarOptions,
                            imageResize: {},
                        },
                        theme: 'snow'
                    });

                    this.id = window.location.href.substring(window.location.href.lastIndexOf("/") + 1) | 0;
                    axios.get(`/admin/compose?handler=post&postId=${this.id}`).then(resp => {
                        this.date = resp.data.post.postDate;
                        this.selectedCatId = resp.data.post.categoryId;
                        this.selectedTags = resp.data.post.tags;
                        this.slug = resp.data.post.slug;
                        this.excerpt = resp.data.post.excerpt;
                        this.title = resp.data.post.title;
                        this.quill.clipboard.dangerouslyPasteHTML(resp.data.post.body);
                        this.published = resp.data.published;
                        this.cats = resp.data.allCats;
                        this.tags = resp.data.allTags;
                        this.pubText = this.published ? 'Update' : 'Publish';

                        // auto save, detect change after data comes back
                        let Delta = Quill.import('delta');
                        let change = new Delta();
                        this.quill.on('text-change', (delta) => {
                            change = change.compose(delta);
                        });
                        setInterval(() => {
                            if (change.length() > 0 && !this.published) {
                                this.saveDraft();
                                change = new Delta();
                            }
                        }, 5000);
                        window.onbeforeunload = () => {
                            if ( (change.length() > 0 || this.fieldChanged) && this.closing) {
                                return 'There are unsaved changes. Are you sure you want to leave?';
                            }
                        }
                    });

                    // img upload
                    let toolbar = this.quill.getModule('toolbar');
                    toolbar.addHandler('image', function () {
                        const input = document.createElement('input');
                        input.setAttribute('type', 'file');
                        input.setAttribute('accept', 'image/*');
                        input.setAttribute('multiple', null);
                        input.click();
                        input.onchange = () => {
                            app.uploadImages(input.files);
                        };
                    });                   
                },
                initHighlight() {
                    hljs.configure({
                        languages: ['cs', 'css', 'java', 'javascript', 'markdown', 'ruby', 'python', 'scss', 'sql', 'typescript', 'xml']
                    });
                },
                onFieldsChange() {
                    this.fieldChanged = true;
                    if (this.published) return;
                    if (!this.showSave) this.showSave = true;
                    this.disableSave = false;
                    this.saveText = 'Save';
                },
                saveDraft() {
                    if (!this.showSave) this.showSave = true;
                    this.disableSave = true;
                    this.saveText = 'Saving...';

                    console.log(this.payload);
                    axios.post('/admin/compose?handler=save', this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            this.id = resp.data.id;
                            this.slug = resp.data.slug;
                        })
                        .catch(err => { console.log(err); });

                    this.saveText = 'Saved';
                },
                revert() {
                    this.published = false;
                    this.pubText = this.published ? 'Update' : 'Publish';
                    this.saveDraft();
                },
                uploadImages(files) {
                    const formData = new FormData();
                    for (let i = 0; i < files.length; i++) {
                        formData.append('images', files[i]);
                    }

                    axios.post('/admin/compose?handler=image', formData, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            var urls = resp.data;
                            const range = this.quill.getSelection();
                            for (var i = 0; i < urls.length; i++) {
                                this.quill.insertEmbed(range.index, 'image', urls[i]);
                            }
                        })
                        .catch(err => { console.log(err); });
                },
                pub() {
                    this.closing = false;
                    this.pubClicked = true;
                    this.pubText = this.published ? 'Updating...' : 'Publishing...';

                    const url = this.published ? '/admin/compose?handler=update' : '/admin/compose?handler=publish';
                    axios.post(url, this.payload, { headers: { 'XSRF-TOKEN': this.tok } })
                        .then(resp => {
                            window.location.replace(resp.data);
                        })
                        .catch(err => { console.log(err); });
                },
            },
        });
    </script>
</body>
</html>