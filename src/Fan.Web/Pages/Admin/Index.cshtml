@page

@model Fan.Web.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Posts";
    Layout = "~/Pages/Admin/_Layout.cshtml";
}

<v-card id="posts" style="width:80%" height="88px">
    <v-card-title>
        <v-select :items="blogs"
                  v-model="selectedBlog"
                  label="Blog"
                  class="input-group--focused"
                  item-value="value">
        </v-select>
        <v-spacer></v-spacer>
        <v-tabs right>
            <v-tab v-for="n in statuses" :key="n.value">
                <v-btn :flat="tabSelected(n.text)" :href="getTabUrl(n.text)">
                    {{ n.text }} ({{ postCount }})
                </v-btn>

            </v-tab>
        </v-tabs>
    </v-card-title>
    <v-data-table hide-headers
                  :items="posts"
                  hide-actions
                  class="elevation-1"
                  :total-items="pagination.totalItems"
                   :pagination.sync="pagination">
        <template slot="items" slot-scope="props">
            <td>
                <h3 v-html="props.item.title"></h3>
                <span>{{ props.item.date }}</span>
            </td>
            <td class="right layout px-0">
                <v-btn icon class="mx-0">
                    <v-icon color="blue">edit</v-icon>
                </v-btn>
                <v-btn icon class="mx-1">
                    <v-icon color="teal">remove_red_eye</v-icon>
                </v-btn>
                <v-btn icon class="mx-3">
                    <v-icon color="pink">delete</v-icon>
                </v-btn>
            </td>
        </template>
        <template slot="no-data">
            <div>You have no posts.</div>
        </template>
    </v-data-table>
    <div class="text-xs-center pt-2">
        <v-pagination v-model="pagination.page" :length="pages"></v-pagination>
    </div>
</v-card>

<v-btn fab
       bottom
       right
       color="pink"
       dark
       fixed
       href="admin/compose">
    <v-icon>add</v-icon>
</v-btn>

@section Scripts {
    <script>
    new Vue({
        el: '#posts',
        data: () => ({
            selectedBlog: 1,
            blogs: @Html.Raw(Model.JsonBlogs),
            posts: @Html.Raw(Model.JsonPosts),
            statuses: @Html.Raw(Model.JsonStatus),   
            postCount: @Model.TotalPostCount,
            pagination: {
                page: 1,
                rowsPerPage: 5,
                totalItems: 10,
            },
        }),
        computed: {
            pages() {
                if (this.pagination.rowsPerPage == null ||
                    this.pagination.totalItems == null
                ) return 0

                return Math.ceil(this.pagination.totalItems / this.pagination.rowsPerPage)
            },
        },
        methods: {
            getTabUrl: function (status) {
                return `?blog=${this.selectedBlog}&status=${status.toLowerCase()}`;
            },
            tabSelected: function (status) {
                let stat = this.getParam('status');
                if (!stat) stat = 'published';
                if (stat.toUpperCase() === status.toUpperCase())
                    return false;
                return true;
            },
            getParam: function (name, url) { 
                if (!url) url = window.location.href;
                name = name.replace(/[\[\]]/g, "\\$&");
                let regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                    results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, " "));
            },
        }
    });
    </script>
}