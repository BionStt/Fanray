@page

@model Fan.Web.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Posts";
    Layout = "~/Pages/Admin/_Layout.cshtml";
}

<blog-posts inline-template>
    <div style="width:80%">
        <v-tabs style="margin-bottom: 18px">
            <v-tab v-for="s in statuses" :key="s.id" @@click="getPosts(s.text)">
                {{ s.text }} ({{ s.count }})
            </v-tab>
        </v-tabs>
        <v-data-table :items="posts"
                      :pagination.sync="pagination"
                      :total-items="totalPosts"
                      :loading="loading"
                      :rows-per-page-items="rowsPerPageItems"
                      rows-per-page-text=""
                      hide-headers
                      class="elevation-1">
            <template slot="items" slot-scope="props">
                <td>
                    <h3 v-if="props.item.title" v-html="props.item.title"></h3>
                    <h3 v-else style="font-style:italic;color:gray">Untitled</h3>
                    <span>{{ props.item.date }} by {{ props.item.author }}</span>
                </td>
                <td class="right layout px-0">
                    <v-btn icon class="mx-0" :href="props.item.editLink">
                        <v-icon color="blue">edit</v-icon>
                    </v-btn>
                    <v-btn icon class="mx-1" target="_blank" :href="props.item.postLink">
                        <v-icon color="teal">remove_red_eye</v-icon>
                    </v-btn>
                    <v-btn icon class="mx-3" @@click="deletePost(props.item)">
                        <v-icon color="pink">delete</v-icon>
                    </v-btn>
                </td>
            </template>
            <template slot="no-data">
                <div>You have no posts.</div>
            </template>
        </v-data-table>
    </div>
</blog-posts>
<v-btn fab
       bottom
       right
       color="pink"
       dark
       fixed
       href="admin/compose">
    <v-icon>add</v-icon>
</v-btn>

@section Scripts {
    <script>
        Vue.component('blog-posts', {
            data: () => ({
                posts: [],
                totalPosts: 0,
                statuses: [],
                activeStatus: 'published',
                pagination: {},
                loading: false,
                rowsPerPageItems: [10, 25],
            }),
            watch: {
                pagination: {
                    handler() {
                        this.getPosts(this.activeStatus);
                    },
                    deep: true,
                },
            },
            mounted() {
                this.getPosts(this.activeStatus);
            },
            methods: {
                getPosts: function (status) {
                    this.activeStatus = status;
                    this.loading = true;
                    let url = `/admin/index?handler=posts&status=${status}&pageNumber=${this.pagination.page}&pageSize=${this.pagination.rowsPerPage}`;
                    console.log(url);
                    axios.get(url).then(response => {
                        this.posts = response.data.posts;
                        this.totalPosts = response.data.totalPosts;
                        this.statuses = response.data.statuses;
                    }).catch(function (error) {
                        console.log(error);
                    });
                    this.loading = false;
                },
                deletePost(item) {
                    const index = this.posts.indexOf(item);
                    if (confirm('You are permanently deleting this post, are you sure?')) {
                        this.loading = true;
                        let url = `/admin/index?postId=${item.id}&status=${this.activeStatus}&pageNumber=${this.pagination.page}&pageSize=${this.pagination.rowsPerPage}`;
                        console.log(url);
                        axios.delete(url, { headers: { 'XSRF-TOKEN': this.$root.tok } })
                            .then(response => {
                                console.log('deleted');
                                this.posts.splice(index, 1);
                                this.posts = response.data.posts;
                                this.totalPosts = response.data.totalPosts;
                                this.statuses = response.data.statuses;
                            })
                            .catch(function (err) {
                                console.log(err);
                            });
                        this.loading = false;
                    }
                },
            },
        });
    </script>
}